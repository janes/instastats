# rldw 04/04/15
# https://github.com/rldw
#
# DESCRIPTION:
# - gets unix timestamp from filenames in indir
#	 generated by detect_faces.py script
# - generates a stacked bar chart plotting info for every weekday
#
# USAGE:
# python analyze_folder_byweekday.py
# -i --indir	older with images generated by detect_faces.py script
# -o --outfile if set graph will be saved to file, e.g. pdf or png

import os, datetime, argparse
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# parse command line arguments
parser = argparse.ArgumentParser(description='Creates bar chart from image filenames, plotting info for every weekday')
parser.add_argument('-i','--indir', required=True,
	help='folder with images generated by detect_faces.py script')
parser.add_argument('-o','--outfile',
	help='if set graph will be saved to file, e.g. pdf or png')
args = parser.parse_args()

# folder to look for images
folder = args.indir

total_imgPerWeekday = [0]*7
faces_imgPerWeekday = [0]*7
nofac_imgPerWeekday = [0]*7
faces1_imtPerWeekday = [0]*7
facesPerWeekday = [0]*7


for filename in os.listdir(folder):
	splitted   = filename.split('_')
	numOfFaces = str(splitted[0])
	timestamp  = int(splitted[1])
	datestring = datetime.datetime.fromtimestamp(timestamp)
	weekday    = datetime.date.weekday(datestring)

	total_imgPerWeekday[weekday] += 1
	facesPerWeekday[weekday] += int(numOfFaces)

	if int(numOfFaces) == 0:
		nofac_imgPerWeekday[weekday] += 1
	elif int(numOfFaces) == 1:
		faces1_imtPerWeekday[weekday] += 1
	else:
		faces_imgPerWeekday[weekday] += 1


plt.style.use('ggplot')

data = []
for i in range(7):
	data.append([faces_imgPerWeekday[i], faces1_imtPerWeekday[i], nofac_imgPerWeekday[i]])

df2 = pd.DataFrame(data, columns=['>1 faces', '1 face', 'no faces'])
ax  = df2.plot(kind='bar', stacked=True, alpha=0.6)


labels = ['mon','tue','wed','thu','fri','sat','sun']
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
ax.set_xticklabels(labels, rotation='horizontal')
ax.set_ylabel('number of posts')
ax.set_xlabel('day of week')


# labels with data for single bars
y = [0]*7
bar   = 0
for p in ax.patches:
	x = p.get_x() + 0.1
	curY = p.get_height()

	y[bar] += curY
	ax.annotate(curY, xy=(p.get_x()+p.get_width()/2.,y[bar]), ha='center', va='center', xytext=(0, -10), textcoords='offset points')

	if bar < len(labels)-1:
		bar += 1
	else:
		bar  = 0


if args.outfile:
	plt.savefig(args.outfile)
	print "Generated plot and saved it to: " + args.outfile
else:
	plt.show()