# rldw 04/04/15
# https://github.com/rldw
#
# DESCRIPTION:
# - gets unix timestamp from filenames in indir
#	 generated by detect_faces.py script
# - generates a stacked bar chart plotting info for every day
#
# USAGE:
# python analyze_folder_byday.py
# -i --indir	older with images generated by detect_faces.py script
# -o --outfile if set graph will be saved to file, e.g. pdf or png

import os, datetime, argparse, math
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# parse command line arguments
parser = argparse.ArgumentParser(description='Creates bar chart from image filenames, plotting info for every day')
parser.add_argument('-i','--indir', required=True,
	help='folder with images generated by detect_faces.py script')
parser.add_argument('-o','--outfile',
	help='if set graph will be saved to file, e.g. pdf or png')
args = parser.parse_args()

# folder to look for images
folder = args.indir

faces_imgPerDay  = {}
nofac_imgPerDay  = {}
faces1_imgPerDay = {}
facesPerDay      = {}


for filename in os.listdir(folder):
	splitted   = filename.split('_')
	numOfFaces = str(splitted[0])
	timestamp  = int(splitted[1])
	datestring = datetime.datetime.fromtimestamp(timestamp)
	y,m,d      = str(datestring).split(' ')[0].split('-')

	if y not in facesPerDay:
		facesPerDay[y]   = {}
		nofac_imgPerDay[y]  = {}
		faces_imgPerDay[y]  = {}
		faces1_imgPerDay[y] = {}

	if m not in facesPerDay[y]:
		facesPerDay[y][m] = [0]*31
		nofac_imgPerDay[y][m]  = [0]*31
		faces_imgPerDay[y][m]  = [0]*31
		faces1_imgPerDay[y][m] = [0]*31

	facesPerDay[y][m][int(d)-1] += 1

	if int(numOfFaces) == 0:
		nofac_imgPerDay[y][m][int(d)-1] += 1
	elif int(numOfFaces) == 1:
		faces1_imgPerDay[y][m][int(d)-1] += 1
	else:
		faces_imgPerDay[y][m][int(d)-1] += 1


# create a 1D array data where each element is a post count sorted from start
# to end date
# also create labels, also sorted from start to end date in format dd.mm.yyyy
data   = []
labels = []
years  = facesPerDay.keys()
years.sort()
for year in years:
	months = facesPerDay[year].keys()
	months.sort()
	for month in months:
		for value in facesPerDay[year][month]:
			if value > 0:
				day = facesPerDay[year][month].index(value)
				temp = [
						faces_imgPerDay[year][month][day],
						faces1_imgPerDay[year][month][day],
						nofac_imgPerDay[year][month][day]
					]
				data.append(temp)

				day += 1
				if day < 10:
					day = "0"+str(day)
				dateasstring = "{0}.{1}.{2}".format(day,month,year)
				labels.append(dateasstring)



plt.style.use('ggplot')
plt.rcParams.update({'font.size': 10})

df2 = pd.DataFrame(data, columns=['>1 faces', '1 face', 'no face'])
ax  = df2.plot(alpha=0.6, figsize=(18,6), kind='bar', stacked=True)

xticks = []
for i in range(len(labels)):
	xticks.append(i+1)


# show every nth label, but max 30
n = int(math.ceil(len(data)/30.0))

ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks(range(len(labels))[::n])
ax.set_xticklabels(labels[::n], rotation='45')
ax.yaxis.grid(False)
ax.xaxis.grid(True)
ax.set_ylabel('number of posts')

# make bars a little bit bigger
for container in ax.containers:
	plt.setp(container, width=1)

# add some space for labels
plt.subplots_adjust(bottom=0.15)

if args.outfile:
	plt.savefig(args.outfile)
	print "Generated plot and saved it to: " + args.outfile
else:
	plt.show()